{"ast":null,"code":"import { reactive } from 'vue';\nimport { useRouter } from 'vue-router';\nimport { post } from '../../utils/request';\nimport ToastView from '../../components/ToastView';\n\nconst useToastEffect = () => {\n  const toastData = reactive({\n    showToast: false,\n    toastMessage: ''\n  });\n\n  const showToast = message => {\n    toastData.showToast = true;\n    toastData.toastMessage = message;\n    setTimeout(() => {\n      toastData.showToast = false, toastData.toastMessage = '';\n    }, 2000);\n  };\n\n  return {\n    toastData,\n    showToast\n  };\n};\n\nexport default {\n  name: 'LoginView',\n  components: {\n    ToastView\n  },\n\n  setup() {\n    // 获取路由实例\n    const router = useRouter(); //reactive 是 Vue3 中提供的实现响应式数据的方法。\n\n    const data = reactive({\n      username: '',\n      password: ''\n    });\n    const {\n      toastData,\n      showToast\n    } = useToastEffect(); // 1--我们现在是用axios自带的post方法发起请求，要求后面的URL是完整的URL，不是后端所要求的的/api/user/login，因此可以手动封装一个post方法，此处为优化1\n    // 2--我们现在是用then/catch方法进行Promise的处理，如果不断地then下去，会造成回调地狱，因此可以采用Vue3支持的async/await，是then/catch的完美版，作用与then/catch相同，只是用法上的区别。\n    // const handleLogin = ()=>{\n    //   // 设置登录状态\n    //   axios.post('https://www.fastmock.site/mock/ae8e9031947a302fed5f92425995aa19/jd/api/user/login',{\n    //     username:data.username,\n    //     password:data.password\n    //   }).then(()=>{\n    //     localStorage.isLogin = true;\n    //     // 在登录之后，通过路由实例跳转\n    //     router.push({name:'Home'})\n    //     alert('成功')\n    //   }).catch(()=>{\n    //     alert('失败')\n    //   })\n    // }\n\n    const handleLogin = async () => {\n      // 可以使用try/catch监听Promise 返回状态，try为成功，catch失败\n      try {\n        // 设置登录状态\n        // 每遇到一个await都会先返回,再往下执行,变成了同步操作\n        const result = await post('/api/user/login', {\n          username: data.username,\n          password: data.password\n        }); // result?.data?.errno的意思是尝试获取result中的data中的error属性，它和result.data.errno的意思是一样的，但是比result.data.errno的容错性更高。\n        // 代码会尝试查找errno，如果查找不到，会返回undefined，而不会报错\n\n        if (result?.errno === 0) {\n          localStorage.isLogin = true; // 在登录之后，通过路由实例跳转\n\n          router.push({\n            name: 'Home'\n          });\n          showToast('登录成功');\n        } else {\n          showToast('登录失败');\n        }\n      } catch (e) {\n        showToast('请求失败');\n      }\n    };\n\n    const handleRegisterClick = () => {\n      // 在登录之后，通过路由实例跳转\n      router.push({\n        name: 'RegisterView'\n      });\n    };\n\n    return {\n      handleLogin,\n      handleRegisterClick,\n      data,\n      toastData\n    };\n  }\n\n};","map":{"version":3,"mappings":"AA+BA,SAAQA,QAAR,QAAuB,KAAvB;AACA,SAASC,SAAT,QAA0B,YAA1B;AACA,SAAQC,IAAR,QAAmB,qBAAnB;AACA,OAAOC,SAAP,MAAsB,4BAAtB;;AAEA,MAAMC,cAAa,GAAI,MAAI;EACzB,MAAMC,SAAQ,GAAIL,QAAQ,CAAC;IACzBM,SAAS,EAAC,KADe;IAEzBC,YAAY,EAAC;EAFY,CAAD,CAA1B;;EAIA,MAAMD,SAAQ,GAAKE,OAAD,IAAW;IACzBH,SAAS,CAACC,SAAV,GAAoB,IAApB;IACAD,SAAS,CAACE,YAAV,GAAuBC,OAAvB;IACAC,UAAU,CAAC,MAAI;MACXJ,SAAS,CAACC,SAAV,GAAoB,KAApB,EACAD,SAAS,CAACE,YAAV,GAAuB,EADvB;IAEH,CAHS,EAGR,IAHQ,CAAV;EAIF,CAPF;;EAQA,OAAO;IAACF,SAAD;IAAWC;EAAX,CAAP;AACF,CAdA;;AAgBA,eAAe;EACbI,IAAI,EAAE,WADO;EAEbC,UAAU,EAAC;IAACR;EAAD,CAFE;;EAGbS,KAAK,GAAE;IACL;IACA,MAAMC,MAAK,GAAIZ,SAAS,EAAxB,CAFK,CAIT;;IACI,MAAMa,IAAG,GAAId,QAAQ,CAAC;MACpBe,QAAQ,EAAC,EADW;MAEpBC,QAAQ,EAAC;IAFW,CAAD,CAArB;IAIA,MAAM;MAACX,SAAD;MAAWC;IAAX,IAAwBF,cAAc,EAA5C,CATK,CAWL;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;;IACA,MAAMa,WAAU,GAAI,YAAS;MAC3B;MACA,IAAG;QACD;QACA;QACA,MAAMC,MAAK,GAAI,MAAMhB,IAAI,CAAC,iBAAD,EAAmB;UAC1Ca,QAAQ,EAACD,IAAI,CAACC,QAD4B;UAE1CC,QAAQ,EAACF,IAAI,CAACE;QAF4B,CAAnB,CAAzB,CAHC,CAOD;QACA;;QACA,IAAGE,MAAM,EAAEC,KAAR,KAAgB,CAAnB,EAAqB;UACnBC,YAAY,CAACC,OAAb,GAAuB,IAAvB,CADmB,CAEnB;;UACAR,MAAM,CAACS,IAAP,CAAY;YAACZ,IAAI,EAAC;UAAN,CAAZ;UACAJ,SAAS,CAAC,MAAD,CAAT;QACD,CALD,MAKK;UACHA,SAAS,CAAC,MAAD,CAAT;QACF;MACD,CAjBD,CAiBC,OAAMiB,CAAN,EAAQ;QACPjB,SAAS,CAAC,MAAD,CAAT;MACF;IACF,CAtBA;;IAwBA,MAAMkB,mBAAkB,GAAI,MAAK;MAC/B;MACAX,MAAM,CAACS,IAAP,CAAY;QAACZ,IAAI,EAAC;MAAN,CAAZ;IACF,CAHA;;IAIA,OAAO;MAAEO,WAAF;MAAcO,mBAAd;MAAkCV,IAAlC;MAAuCT;IAAvC,CAAP;EACF;;AA3Da,CAAf","names":["reactive","useRouter","post","ToastView","useToastEffect","toastData","showToast","toastMessage","message","setTimeout","name","components","setup","router","data","username","password","handleLogin","result","errno","localStorage","isLogin","push","e","handleRegisterClick"],"sourceRoot":"","sources":["D:\\StudySoft\\VSCode\\VSCodeFile\\CODE_前端projects\\fangjingdong-mall_project\\src\\views\\login\\LoginView.vue"],"sourcesContent":["<template>\n  <div class=\"wrapper\">\n    <img class=\"wrapper__img\" src='http://www.dell-lee.com/imgs/vue3/user.png' />\n    <div class=\"wrapper__input\">\n      <input\n        class=\"wrapper__input__content\"\n        placeholder=\"用户名\"\n        v-model=\"data.username\"\n      />\n    </div>\n    <div class=\"wrapper__input\">\n      <input\n        type=\"password\"\n        class=\"wrapper__input__content\"\n        placeholder=\"请输入密码\"\n        v-model=\"data.password\"\n      />\n    </div>\n    <div class=\"wrapper__login-button\" @click=\"handleLogin\">登陆</div>\n    <!-- 像这样通过router-link :to跳转，会在外层自动包裹一个a标签 -->\n    <!-- <router-link :to=\"{name:'RegisterView'}\">\n      <div class=\"wrapper__login-link\">立即注册</div>\n    </router-link> -->\n    <!-- 因此采取事件绑定的方式进行事件跳转 -->\n    <div class=\"wrapper__login-link\" @click=\"handleRegisterClick\">立即注册</div>\n    <!-- 将信息传给ToastView组件 -->\n    <ToastView v-if=data.showToast :message=\"data.toastMessage\" />\n  </div>\n</template>\n\n<script>\nimport {reactive} from 'vue';\nimport { useRouter } from 'vue-router';\nimport {post} from '../../utils/request';\nimport ToastView from '../../components/ToastView';\n\nconst useToastEffect = ()=>{\n  const toastData = reactive({\n    showToast:false,\n    toastMessage:''\n  })\n  const showToast = (message)=>{\n      toastData.showToast=true;\n      toastData.toastMessage=message;\n      setTimeout(()=>{\n          toastData.showToast=false,\n          toastData.toastMessage=''\n      },2000)\n    }\n  return {toastData,showToast}\n}\n\nexport default {\n  name: 'LoginView',\n  components:{ToastView},\n  setup(){\n    // 获取路由实例\n    const router = useRouter();\n\n//reactive 是 Vue3 中提供的实现响应式数据的方法。\n    const data = reactive({\n      username:'',\n      password:'',\n    })\n    const {toastData,showToast} = useToastEffect()\n\n    // 1--我们现在是用axios自带的post方法发起请求，要求后面的URL是完整的URL，不是后端所要求的的/api/user/login，因此可以手动封装一个post方法，此处为优化1\n    // 2--我们现在是用then/catch方法进行Promise的处理，如果不断地then下去，会造成回调地狱，因此可以采用Vue3支持的async/await，是then/catch的完美版，作用与then/catch相同，只是用法上的区别。\n    // const handleLogin = ()=>{\n    //   // 设置登录状态\n    //   axios.post('https://www.fastmock.site/mock/ae8e9031947a302fed5f92425995aa19/jd/api/user/login',{\n    //     username:data.username,\n    //     password:data.password\n    //   }).then(()=>{\n    //     localStorage.isLogin = true;\n    //     // 在登录之后，通过路由实例跳转\n    //     router.push({name:'Home'})\n    //     alert('成功')\n    //   }).catch(()=>{\n    //     alert('失败')\n    //   })\n    // }\n    const handleLogin = async()=>{\n      // 可以使用try/catch监听Promise 返回状态，try为成功，catch失败\n      try{\n        // 设置登录状态\n        // 每遇到一个await都会先返回,再往下执行,变成了同步操作\n        const result = await post('/api/user/login',{\n          username:data.username,\n          password:data.password\n        })\n        // result?.data?.errno的意思是尝试获取result中的data中的error属性，它和result.data.errno的意思是一样的，但是比result.data.errno的容错性更高。\n        // 代码会尝试查找errno，如果查找不到，会返回undefined，而不会报错\n        if(result?.errno===0){\n          localStorage.isLogin = true;\n          // 在登录之后，通过路由实例跳转\n          router.push({name:'Home'})\n          showToast('登录成功')\n        }else{\n          showToast('登录失败')\n        }\n      }catch(e){\n        showToast('请求失败')\n      }\n    }\n\n    const handleRegisterClick = () =>{\n      // 在登录之后，通过路由实例跳转\n      router.push({name:'RegisterView'})\n    }\n    return { handleLogin,handleRegisterClick,data,toastData}\n  }\n}\n</script>\n\n<style lang=\"scss\" scoped>\n@import '../../style/viriables.scss';\n.wrapper {\n  position: absolute;\n  top: 50%;\n  left: 0;\n  right: 0;\n  transform: translateY(-50%);\n  &__img {\n    display: block;\n    margin: 0 auto .4rem auto;\n    width: .66rem;\n    height: .66rem;\n  }\n  &__input {\n    height: .48rem;\n    margin: 0 .4rem .16rem .4rem;\n    padding: 0 .16rem;\n    background: #F9F9F9;\n    border: 1px solid rgba(0,0,0,0.10);\n    border-radius: 6px;\n    border-radius: 6px;\n    &__content {\n      line-height: .48rem;\n      border: none;\n      outline: none;\n      width: 100%;\n      background: none;\n      font-size: .16rem;\n      color: $content-notice-fontcolor;\n      &::placeholder {\n        color: $content-notice-fontcolor;\n      }\n    }\n  }\n  &__login-button {\n    margin: .32rem .4rem .16rem .4rem;\n    line-height: .48rem;\n    background: #0091FF;\n    box-shadow: 0 .04rem .08rem 0 rgba(0,145,255,0.32);\n    border-radius: .04rem;\n    border-radius: .04rem;\n    color: #fff;\n    font-size: .16rem;\n    text-align: center;\n  }\n  &__login-link {\n    text-align: center;\n    font-size: .14rem;\n    color: $content-notice-fontcolor;\n  }\n}\n</style>"]},"metadata":{},"sourceType":"module"}