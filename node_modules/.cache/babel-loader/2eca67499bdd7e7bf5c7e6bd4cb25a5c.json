{"ast":null,"code":"import { useRouter } from 'vue-router';\nimport { reactive, toRefs } from 'vue';\nimport { post } from '../../utils/request';\nimport ToastView, { useToastEffect } from '../../components/ToastView'; // 注册逻辑处理\n\nconst useRegisterEffect = showToast => {\n  // 获取路由实例\n  const router = useRouter(); //reactive 是 Vue3 中提供的实现响应式数据的方法。\n\n  const data = reactive({\n    username: '',\n    password: '',\n    ensurement: ''\n  }); //到这里setup()函数只能导出data\n  // toRefs 用于将响应式对象转换为结果对象，其中结果对象的每个属性都是指向原始对象相应属性的ref\n\n  const {\n    username,\n    password,\n    ensurement\n  } = toRefs(data); //到这里setup()函数可以导出username和password\n\n  const handleRegister = async () => {\n    // 可以使用try/catch监听Promise 返回状态，try为成功，catch失败\n    try {\n      // 设置登录状态\n      // 每遇到一个await都会先返回,再往下执行,变成了同步操作\n      const result = await post('/api/user/register', {\n        username: data.username,\n        password: data.password\n      }); // result?.data?.errno的意思是尝试获取result中的data中的error属性，它和result.data.errno的意思是一样的，但是比result.data.errno的容错性更高。\n      // 代码会尝试查找errno，如果查找不到，会返回undefined，而不会报错\n\n      if (result?.errno === 0) {\n        router.push({\n          name: 'LoginView'\n        });\n        showToast('注册成功');\n      } else {\n        showToast('注册失败');\n      }\n    } catch (e) {\n      showToast('请求失败');\n    }\n  };\n\n  return {\n    username,\n    password,\n    ensurement,\n    handleRegister\n  };\n};\n\nexport default {\n  name: 'RegisterView',\n  components: {\n    ToastView\n  },\n\n  setup() {\n    // 获取路由实例\n    const router = useRouter();\n    const {\n      show,\n      toastMessage,\n      showToast\n    } = useToastEffect();\n    const {\n      username,\n      password,\n      ensurement,\n      handleRegister\n    } = useRegisterEffect(showToast);\n\n    const handleLoginClick = () => {\n      router.push({\n        name: 'LoginView'\n      });\n    };\n\n    return {\n      username,\n      password,\n      ensurement,\n      show,\n      toastMessage,\n      handleRegister,\n      handleLoginClick\n    };\n  }\n\n};","map":{"version":3,"mappings":"AAkCA,SAASA,SAAT,QAA0B,YAA1B;AACA,SAAQC,QAAR,EAAkBC,MAAlB,QAA+B,KAA/B;AACA,SAAQC,IAAR,QAAmB,qBAAnB;AACA,OAAOC,SAAP,IAAkBC,cAAlB,QAAuC,4BAAvC,C,CAEA;;AACA,MAAMC,iBAAgB,GAAKC,SAAD,IAAa;EACnC;EACA,MAAMC,MAAK,GAAIR,SAAS,EAAxB,CAFmC,CAGnC;;EACA,MAAMS,IAAG,GAAIR,QAAQ,CAAC;IACpBS,QAAQ,EAAC,EADW;IAEpBC,QAAQ,EAAC,EAFW;IAGpBC,UAAU,EAAC;EAHS,CAAD,CAArB,CAJmC,CAQjC;EACF;;EACA,MAAM;IAACF,QAAD;IAAUC,QAAV;IAAmBC;EAAnB,IAAiCV,MAAM,CAACO,IAAD,CAA7C,CAVmC,CAUiB;;EACpD,MAAMI,cAAa,GAAI,YAAS;IAC9B;IACA,IAAG;MACD;MACA;MACA,MAAMC,MAAK,GAAI,MAAMX,IAAI,CAAC,oBAAD,EAAsB;QAC7CO,QAAQ,EAACD,IAAI,CAACC,QAD+B;QAE7CC,QAAQ,EAACF,IAAI,CAACE;MAF+B,CAAtB,CAAzB,CAHC,CAOD;MACA;;MACA,IAAGG,MAAM,EAAEC,KAAR,KAAgB,CAAnB,EAAqB;QACnBP,MAAM,CAACQ,IAAP,CAAY;UAACC,IAAI,EAAC;QAAN,CAAZ;QACAV,SAAS,CAAC,MAAD,CAAT;MACD,CAHD,MAGK;QACHA,SAAS,CAAC,MAAD,CAAT;MACF;IACD,CAfD,CAeC,OAAMW,CAAN,EAAQ;MACPX,SAAS,CAAC,MAAD,CAAT;IACF;EACF,CApBA;;EAqBA,OAAO;IAACG,QAAD;IAAUC,QAAV;IAAmBC,UAAnB;IAA8BC;EAA9B,CAAP;AACJ,CAjCA;;AAmCA,eAAe;EACbI,IAAI,EAAE,cADO;EAEbE,UAAU,EAAC;IAACf;EAAD,CAFE;;EAGbgB,KAAK,GAAG;IACN;IACA,MAAMZ,MAAK,GAAIR,SAAS,EAAxB;IAEA,MAAM;MAACqB,IAAD;MAAMC,YAAN;MAAmBf;IAAnB,IAAgCF,cAAc,EAApD;IACA,MAAM;MAACK,QAAD;MAAUC,QAAV;MAAmBC,UAAnB;MAA8BC;IAA9B,IAAgDP,iBAAiB,CAACC,SAAD,CAAvE;;IAEA,MAAMgB,gBAAe,GAAI,MAAI;MAC3Bf,MAAM,CAACQ,IAAP,CAAY;QAACC,IAAI,EAAC;MAAN,CAAZ;IACD,CAFD;;IAGA,OAAO;MACLP,QADK;MACIC,QADJ;MACaC,UADb;MACwBS,IADxB;MAC6BC,YAD7B;MAELT,cAFK;MAEUU;IAFV,CAAP;EAIF;;AAjBa,CAAf","names":["useRouter","reactive","toRefs","post","ToastView","useToastEffect","useRegisterEffect","showToast","router","data","username","password","ensurement","handleRegister","result","errno","push","name","e","components","setup","show","toastMessage","handleLoginClick"],"sourceRoot":"","sources":["D:\\StudySoft\\VSCode\\VSCodeFile\\CODE_前端projects\\fangjingdong-mall_project\\src\\views\\register\\RegisterView.vue"],"sourcesContent":["<template>\n  <div class=\"wrapper\">\n    <img class=\"wrapper__img\" src=\"http://www.dell-lee.com/imgs/vue3/user.png\"/>\n    <div class=\"wrapper__input\">\n      <input\n        class=\"wrapper__input__content\"\n        placeholder=\"请输入用户名\"\n        v-model=\"username\"\n      />\n    </div>\n    <div class=\"wrapper__input\">\n      <input\n        type=\"password\"\n        class=\"wrapper__input__content\"\n        placeholder=\"请输入密码\"\n        autocomplete=\"new-password\"\n        v-model=\"password\"\n      />\n    </div>\n    <div class=\"wrapper__input\">\n      <input\n        type=\"password\"\n        class=\"wrapper__input__content\"\n        placeholder=\"确认密码\"\n        v-model=\"ensurement\"\n      />\n    </div>\n    <div class=\"wrapper__register-button\" @click=\"handleRegister\">注册</div>\n    <div class=\"wrapper__register-link\" @click=\"handleLoginClick\">已有账号去登陆</div>\n    <ToastView v-if=\"show\" :message=\"toastMessage\" />\n  </div>\n</template>\n\n<script>\nimport { useRouter } from 'vue-router';\nimport {reactive, toRefs} from 'vue';\nimport {post} from '../../utils/request';\nimport ToastView,{useToastEffect} from '../../components/ToastView';\n\n// 注册逻辑处理\nconst useRegisterEffect = (showToast)=>{\n    // 获取路由实例\n    const router = useRouter();\n    //reactive 是 Vue3 中提供的实现响应式数据的方法。\n    const data = reactive({\n      username:'',\n      password:'',\n      ensurement:''\n    })//到这里setup()函数只能导出data\n    // toRefs 用于将响应式对象转换为结果对象，其中结果对象的每个属性都是指向原始对象相应属性的ref\n    const {username,password,ensurement} = toRefs(data);//到这里setup()函数可以导出username和password\n    const handleRegister = async()=>{\n      // 可以使用try/catch监听Promise 返回状态，try为成功，catch失败\n      try{\n        // 设置登录状态\n        // 每遇到一个await都会先返回,再往下执行,变成了同步操作\n        const result = await post('/api/user/register',{\n          username:data.username,\n          password:data.password\n        })\n        // result?.data?.errno的意思是尝试获取result中的data中的error属性，它和result.data.errno的意思是一样的，但是比result.data.errno的容错性更高。\n        // 代码会尝试查找errno，如果查找不到，会返回undefined，而不会报错\n        if(result?.errno===0){\n          router.push({name:'LoginView'})\n          showToast('注册成功')\n        }else{\n          showToast('注册失败')\n        }\n      }catch(e){\n        showToast('请求失败')\n      }\n    }\n    return {username,password,ensurement,handleRegister}\n}\n\nexport default {\n  name: 'RegisterView',\n  components:{ToastView},\n  setup() {\n    // 获取路由实例\n    const router = useRouter();\n\n    const {show,toastMessage,showToast} = useToastEffect()\n    const {username,password,ensurement,handleRegister} = useRegisterEffect(showToast);\n\n    const handleLoginClick = ()=>{\n      router.push({name:'LoginView'})\n    };\n    return {\n      username,password,ensurement,show,toastMessage,\n      handleRegister,handleLoginClick\n    }\n  }\n}\n</script>\n\n<style lang=\"scss\" scoped>\n@import '../../style/viriables.scss';\n.wrapper {\n  position: absolute;\n  top: 50%;\n  left: 0;\n  right: 0;\n  transform: translateY(-50%);\n  &__img {\n    display: block;\n    margin: 0 auto .4rem auto;\n    width: .66rem;\n    height: .66rem;\n  }\n  &__input {\n    height: .48rem;\n    margin: 0 .4rem .16rem .4rem;\n    padding: 0 .16rem;\n    background: #F9F9F9;\n    border: 1px solid rgba(0,0,0,0.10);\n    border-radius: 6px;\n    border-radius: 6px;\n    &__content {\n      line-height: .48rem;\n      border: none;\n      outline: none;\n      width: 100%;\n      background: none;\n      font-size: .16rem;\n      color: $content-notice-fontcolor;\n      &::placeholder {\n        color: $content-notice-fontcolor;\n      }\n    }\n  }\n  &__register-button {\n    margin: .32rem .4rem .16rem .4rem;\n    line-height: .48rem;\n    background: #0091FF;\n    box-shadow: 0 .04rem .08rem 0 rgba(0,145,255,0.32);\n    border-radius: .04rem;\n    border-radius: .04rem;\n    color: #fff;\n    font-size: .16rem;\n    text-align: center;\n  }\n  &__register-link {\n    text-align: center;\n    font-size: .14rem;\n    color: $content-notice-fontcolor;\n  }\n}\n</style>"]},"metadata":{},"sourceType":"module"}