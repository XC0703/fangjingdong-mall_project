{"ast":null,"code":"import { reactive, toRefs } from 'vue';\nimport { useRouter } from 'vue-router';\nimport { post } from '../../utils/request';\nimport ToastView, { useToastEffect } from '../../components/ToastView'; // 登录逻辑处理\n\nconst useLoginEffect = showToast => {\n  // 1--我们现在是用axios自带的post方法发起请求，要求后面的URL是完整的URL，不是后端所要求的的/api/user/login，因此可以手动封装一个post方法，此处为优化1\n  // 2--我们现在是用then/catch方法进行Promise的处理，如果不断地then下去，会造成回调地狱，因此可以采用Vue3支持的async/await，是then/catch的完美版，作用与then/catch相同，只是用法上的区别。\n  // const handleLogin = ()=>{\n  //   // 设置登录状态\n  //   axios.post('https://www.fastmock.site/mock/ae8e9031947a302fed5f92425995aa19/jd/api/user/login',{\n  //     username:data.username,\n  //     password:data.password\n  //   }).then(()=>{\n  //     localStorage.isLogin = true;\n  //     // 在登录之后，通过路由实例跳转\n  //     router.push({name:'Home'})\n  //     alert('成功')\n  //   }).catch(()=>{\n  //     alert('失败')\n  //   })\n  // }\n  // 获取路由实例\n  const router = useRouter(); //reactive 是 Vue3 中提供的实现响应式数据的方法。\n\n  const data = reactive({\n    username: '',\n    password: ''\n  }); //到这里setup()函数只能导出data\n  // toRefs 用于将响应式对象转换为结果对象，其中结果对象的每个属性都是指向原始对象相应属性的ref\n\n  const {\n    username,\n    password\n  } = toRefs(data); //到这里setup()函数可以导出username和password\n\n  const handleLogin = async () => {\n    // 可以使用try/catch监听Promise 返回状态，try为成功，catch失败\n    try {\n      // 设置登录状态\n      // 每遇到一个await都会先返回,再往下执行,变成了同步操作\n      const result = await post('/api/user/login', {\n        username: data.username,\n        password: data.password\n      }); // result?.data?.errno的意思是尝试获取result中的data中的error属性，它和result.data.errno的意思是一样的，但是比result.data.errno的容错性更高。\n      // 代码会尝试查找errno，如果查找不到，会返回undefined，而不会报错\n\n      if (result?.errno === 0) {\n        localStorage.isLogin = true; // 在登录之后，通过路由实例跳转\n\n        router.push({\n          name: 'Home'\n        });\n        showToast('登录成功');\n      } else {\n        showToast('登录失败');\n      }\n    } catch (e) {\n      showToast('请求失败');\n    }\n  };\n\n  return {\n    username,\n    password,\n    handleLogin\n  };\n}; // 注册逻辑处理\n\n\nconst useRegisterEffect = () => {\n  // 获取路由实例\n  const router = useRouter();\n\n  const handleRegisterClick = () => {\n    // 在登录之后，通过路由实例跳转\n    router.push({\n      name: 'RegisterView'\n    });\n  };\n\n  return {\n    handleRegisterClick\n  };\n};\n\nexport default {\n  name: 'LoginView',\n  components: {\n    ToastView\n  },\n\n  setup() {\n    const {\n      show,\n      toastMessage,\n      showToast\n    } = useToastEffect();\n    const {\n      username,\n      password,\n      handleLogin\n    } = useLoginEffect(showToast);\n    const {\n      handleRegisterClick\n    } = useRegisterEffect();\n    return {\n      handleLogin,\n      handleRegisterClick,\n      show,\n      toastMessage,\n      username,\n      password\n    };\n  }\n\n};","map":{"version":3,"mappings":"AA+BA,SAAQA,QAAR,EAAkBC,MAAlB,QAA+B,KAA/B;AACA,SAASC,SAAT,QAA0B,YAA1B;AACA,SAAQC,IAAR,QAAmB,qBAAnB;AACA,OAAOC,SAAP,IAAkBC,cAAlB,QAAuC,4BAAvC,C,CAEA;;AACA,MAAMC,cAAa,GAAKC,SAAD,IAAa;EAChC;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACI;EACJ,MAAMC,MAAK,GAAIN,SAAS,EAAxB,CAlBgC,CAmBhC;;EACA,MAAMO,IAAG,GAAIT,QAAQ,CAAC;IACpBU,QAAQ,EAAC,EADW;IAEpBC,QAAQ,EAAC;EAFW,CAAD,CAArB,CApBgC,CAuB9B;EACF;;EACA,MAAM;IAACD,QAAD;IAAUC;EAAV,IAAsBV,MAAM,CAACQ,IAAD,CAAlC,CAzBgC,CAyBS;;EAEzC,MAAMG,WAAU,GAAI,YAAS;IAC3B;IACA,IAAG;MACD;MACA;MACA,MAAMC,MAAK,GAAI,MAAMV,IAAI,CAAC,iBAAD,EAAmB;QAC1CO,QAAQ,EAACD,IAAI,CAACC,QAD4B;QAE1CC,QAAQ,EAACF,IAAI,CAACE;MAF4B,CAAnB,CAAzB,CAHC,CAOD;MACA;;MACA,IAAGE,MAAM,EAAEC,KAAR,KAAgB,CAAnB,EAAqB;QACnBC,YAAY,CAACC,OAAb,GAAuB,IAAvB,CADmB,CAEnB;;QACAR,MAAM,CAACS,IAAP,CAAY;UAACC,IAAI,EAAC;QAAN,CAAZ;QACAX,SAAS,CAAC,MAAD,CAAT;MACD,CALD,MAKK;QACHA,SAAS,CAAC,MAAD,CAAT;MACF;IACD,CAjBD,CAiBC,OAAMY,CAAN,EAAQ;MACPZ,SAAS,CAAC,MAAD,CAAT;IACF;EACF,CAtBA;;EAuBA,OAAO;IAACG,QAAD;IAAUC,QAAV;IAAmBC;EAAnB,CAAP;AACJ,CAnDA,C,CAoDA;;;AACA,MAAMQ,iBAAgB,GAAI,MAAI;EAC1B;EACA,MAAMZ,MAAK,GAAIN,SAAS,EAAxB;;EACA,MAAMmB,mBAAkB,GAAI,MAAK;IAC/B;IACAb,MAAM,CAACS,IAAP,CAAY;MAACC,IAAI,EAAC;IAAN,CAAZ;EACF,CAHA;;EAIA,OAAO;IAACG;EAAD,CAAP;AACJ,CARA;;AASA,eAAe;EACbH,IAAI,EAAE,WADO;EAEbI,UAAU,EAAC;IAAClB;EAAD,CAFE;;EAGbmB,KAAK,GAAE;IAGL,MAAM;MAACC,IAAD;MAAMC,YAAN;MAAmBlB;IAAnB,IAAgCF,cAAc,EAApD;IACA,MAAM;MAAEK,QAAF;MAAWC,QAAX;MAAoBC;IAApB,IAAoCN,cAAc,CAACC,SAAD,CAAxD;IACA,MAAM;MAACc;IAAD,IAAwBD,iBAAiB,EAA/C;IAEA,OAAO;MAAER,WAAF;MAAcS,mBAAd;MAAkCG,IAAlC;MAAuCC,YAAvC;MAAoDf,QAApD;MAA6DC;IAA7D,CAAP;EACF;;AAXa,CAAf","names":["reactive","toRefs","useRouter","post","ToastView","useToastEffect","useLoginEffect","showToast","router","data","username","password","handleLogin","result","errno","localStorage","isLogin","push","name","e","useRegisterEffect","handleRegisterClick","components","setup","show","toastMessage"],"sourceRoot":"","sources":["D:\\StudySoft\\VSCode\\VSCodeFile\\CODE_前端projects\\fangjingdong-mall_project\\src\\views\\login\\LoginView.vue"],"sourcesContent":["<template>\n  <div class=\"wrapper\">\n    <img class=\"wrapper__img\" src='http://www.dell-lee.com/imgs/vue3/user.png' />\n    <div class=\"wrapper__input\">\n      <input\n        class=\"wrapper__input__content\"\n        placeholder=\"用户名\"\n        v-model=\"username\"\n      />\n    </div>\n    <div class=\"wrapper__input\">\n      <input\n        type=\"password\"\n        class=\"wrapper__input__content\"\n        placeholder=\"请输入密码\"\n        v-model=\"password\"\n      />\n    </div>\n    <div class=\"wrapper__login-button\" @click=\"handleLogin\">登陆</div>\n    <!-- 像这样通过router-link :to跳转，会在外层自动包裹一个a标签 -->\n    <!-- <router-link :to=\"{name:'RegisterView'}\">\n      <div class=\"wrapper__login-link\">立即注册</div>\n    </router-link> -->\n    <!-- 因此采取事件绑定的方式进行事件跳转 -->\n    <div class=\"wrapper__login-link\" @click=\"handleRegisterClick\">立即注册</div>\n    <!-- 将信息传给ToastView组件 -->\n    <ToastView v-if=\"show\" :message=\"toastMessage\" />\n  </div>\n</template>\n\n<script>\nimport {reactive, toRefs} from 'vue';\nimport { useRouter } from 'vue-router';\nimport {post} from '../../utils/request';\nimport ToastView,{useToastEffect} from '../../components/ToastView';\n\n// 登录逻辑处理\nconst useLoginEffect = (showToast)=>{\n    // 1--我们现在是用axios自带的post方法发起请求，要求后面的URL是完整的URL，不是后端所要求的的/api/user/login，因此可以手动封装一个post方法，此处为优化1\n    // 2--我们现在是用then/catch方法进行Promise的处理，如果不断地then下去，会造成回调地狱，因此可以采用Vue3支持的async/await，是then/catch的完美版，作用与then/catch相同，只是用法上的区别。\n    // const handleLogin = ()=>{\n    //   // 设置登录状态\n    //   axios.post('https://www.fastmock.site/mock/ae8e9031947a302fed5f92425995aa19/jd/api/user/login',{\n    //     username:data.username,\n    //     password:data.password\n    //   }).then(()=>{\n    //     localStorage.isLogin = true;\n    //     // 在登录之后，通过路由实例跳转\n    //     router.push({name:'Home'})\n    //     alert('成功')\n    //   }).catch(()=>{\n    //     alert('失败')\n    //   })\n    // }\n        // 获取路由实例\n    const router = useRouter();\n    //reactive 是 Vue3 中提供的实现响应式数据的方法。\n    const data = reactive({\n      username:'',\n      password:'',\n    })//到这里setup()函数只能导出data\n    // toRefs 用于将响应式对象转换为结果对象，其中结果对象的每个属性都是指向原始对象相应属性的ref\n    const {username,password} = toRefs(data);//到这里setup()函数可以导出username和password\n    \n    const handleLogin = async()=>{\n      // 可以使用try/catch监听Promise 返回状态，try为成功，catch失败\n      try{\n        // 设置登录状态\n        // 每遇到一个await都会先返回,再往下执行,变成了同步操作\n        const result = await post('/api/user/login',{\n          username:data.username,\n          password:data.password\n        })\n        // result?.data?.errno的意思是尝试获取result中的data中的error属性，它和result.data.errno的意思是一样的，但是比result.data.errno的容错性更高。\n        // 代码会尝试查找errno，如果查找不到，会返回undefined，而不会报错\n        if(result?.errno===0){\n          localStorage.isLogin = true;\n          // 在登录之后，通过路由实例跳转\n          router.push({name:'Home'})\n          showToast('登录成功')\n        }else{\n          showToast('登录失败')\n        }\n      }catch(e){\n        showToast('请求失败')\n      }\n    }\n    return {username,password,handleLogin}\n}\n// 注册逻辑处理\nconst useRegisterEffect = ()=>{\n    // 获取路由实例\n    const router = useRouter();\n    const handleRegisterClick = () =>{\n      // 在登录之后，通过路由实例跳转\n      router.push({name:'RegisterView'})\n    }\n    return {handleRegisterClick}\n}\nexport default {\n  name: 'LoginView',\n  components:{ToastView},\n  setup(){\n\n\n    const {show,toastMessage,showToast} = useToastEffect()\n    const { username,password,handleLogin } = useLoginEffect(showToast)\n    const {handleRegisterClick} = useRegisterEffect();\n\n    return { handleLogin,handleRegisterClick,show,toastMessage,username,password}\n  }\n}\n</script>\n\n<style lang=\"scss\" scoped>\n@import '../../style/viriables.scss';\n.wrapper {\n  position: absolute;\n  top: 50%;\n  left: 0;\n  right: 0;\n  transform: translateY(-50%);\n  &__img {\n    display: block;\n    margin: 0 auto .4rem auto;\n    width: .66rem;\n    height: .66rem;\n  }\n  &__input {\n    height: .48rem;\n    margin: 0 .4rem .16rem .4rem;\n    padding: 0 .16rem;\n    background: #F9F9F9;\n    border: 1px solid rgba(0,0,0,0.10);\n    border-radius: 6px;\n    border-radius: 6px;\n    &__content {\n      line-height: .48rem;\n      border: none;\n      outline: none;\n      width: 100%;\n      background: none;\n      font-size: .16rem;\n      color: $content-notice-fontcolor;\n      &::placeholder {\n        color: $content-notice-fontcolor;\n      }\n    }\n  }\n  &__login-button {\n    margin: .32rem .4rem .16rem .4rem;\n    line-height: .48rem;\n    background: #0091FF;\n    box-shadow: 0 .04rem .08rem 0 rgba(0,145,255,0.32);\n    border-radius: .04rem;\n    border-radius: .04rem;\n    color: #fff;\n    font-size: .16rem;\n    text-align: center;\n  }\n  &__login-link {\n    text-align: center;\n    font-size: .14rem;\n    color: $content-notice-fontcolor;\n  }\n}\n</style>"]},"metadata":{},"sourceType":"module"}