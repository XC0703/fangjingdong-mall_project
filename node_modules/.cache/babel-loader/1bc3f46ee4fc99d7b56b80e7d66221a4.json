{"ast":null,"code":"import { createRouter, createWebHashHistory } from 'vue-router';\nimport HomeView from '../views/home/HomeView';\nimport LoginView from '../views/login/LoginView';\nimport RegisterView from '../views/register/RegisterView';\nconst routes = [{\n  path: '/',\n  name: 'Home',\n  component: HomeView\n}, {\n  path: '/login',\n  name: 'LoginView',\n  component: LoginView,\n\n  // 只有访问LoginView这个页面之前才会执行,作用是登录之后无法访问LoginView页面\n  beforeEnter(to, from, next) {\n    const {\n      isLogin\n    } = localStorage; //解构赋值，相当于const isLogin = localStorage.isLogin\n    // 如果已经登录，则跳转到Home页面，否则正常展示当前页面\n\n    isLogin ? next({\n      name: 'Home'\n    }) : next();\n  }\n\n}, {\n  path: '/register',\n  name: 'RegisterView',\n  component: RegisterView\n}];\nconst router = createRouter({\n  history: createWebHashHistory(),\n  routes\n}); // 路由守卫实现基础登陆校验功能\n// beforeEach表示在初始化时候被调用和每次路由切换之前别调用\n\nrouter.beforeEach((to, from, next) => {\n  // isLogin在本地存储中\n  const isLogin = localStorage.isLogin; //to：进入到哪个路由去\n  //from：从哪个路由离开\n  //next：路由的控制参数，常用的有next(true)和next(false)\n  // 如果已经登录或者要访问的页面是Login页面，则可以执行\n  // 用户没有登录的时候，无法访问其它页面，只能跳到Login页面\n\n  if (!isLogin && to.name !== 'LoginView' && to.name !== 'register') {\n    next({\n      name: 'LoginView'\n    });\n  } else {\n    next();\n  }\n});\nexport default router;","map":{"version":3,"names":["createRouter","createWebHashHistory","HomeView","LoginView","RegisterView","routes","path","name","component","beforeEnter","to","from","next","isLogin","localStorage","router","history","beforeEach"],"sources":["D:/StudySoft/VSCode/VSCodeFile/CODE_前端projects/fangjingdong-mall_project/src/router/index.js"],"sourcesContent":["import { createRouter, createWebHashHistory } from 'vue-router'\r\nimport HomeView from '../views/home/HomeView';\r\nimport LoginView from '../views/login/LoginView';\r\nimport RegisterView from '../views/register/RegisterView';\r\n\r\nconst routes = [\r\n  {\r\n    path:'/',\r\n    name:'Home',\r\n    component: HomeView\r\n  },\r\n  {\r\n    path:'/login',\r\n    name:'LoginView',\r\n    component:LoginView,\r\n    // 只有访问LoginView这个页面之前才会执行,作用是登录之后无法访问LoginView页面\r\n    beforeEnter(to,from,next){\r\n      const {isLogin} = localStorage;//解构赋值，相当于const isLogin = localStorage.isLogin\r\n      // 如果已经登录，则跳转到Home页面，否则正常展示当前页面\r\n      isLogin ? next({name:'Home'}): next();\r\n    }\r\n  },\r\n  {\r\n    path:'/register',\r\n    name:'RegisterView',\r\n    component: RegisterView\r\n  },\r\n]\r\n\r\nconst router = createRouter({\r\n  history: createWebHashHistory(),\r\n  routes\r\n})\r\n\r\n// 路由守卫实现基础登陆校验功能\r\n// beforeEach表示在初始化时候被调用和每次路由切换之前别调用\r\nrouter.beforeEach((to,from,next)=>{\r\n  // isLogin在本地存储中\r\n  const isLogin = localStorage.isLogin;\r\n\r\n  //to：进入到哪个路由去\r\n  //from：从哪个路由离开\r\n  //next：路由的控制参数，常用的有next(true)和next(false)\r\n\r\n  // 如果已经登录或者要访问的页面是Login页面，则可以执行\r\n  // 用户没有登录的时候，无法访问其它页面，只能跳到Login页面\r\n  if(!isLogin&&(to.name !=='LoginView'&&to.name !=='register')){\r\n    next({name:'LoginView'})\r\n  }else{\r\n    next()\r\n  }\r\n})\r\n\r\nexport default router\r\n"],"mappings":"AAAA,SAASA,YAAT,EAAuBC,oBAAvB,QAAmD,YAAnD;AACA,OAAOC,QAAP,MAAqB,wBAArB;AACA,OAAOC,SAAP,MAAsB,0BAAtB;AACA,OAAOC,YAAP,MAAyB,gCAAzB;AAEA,MAAMC,MAAM,GAAG,CACb;EACEC,IAAI,EAAC,GADP;EAEEC,IAAI,EAAC,MAFP;EAGEC,SAAS,EAAEN;AAHb,CADa,EAMb;EACEI,IAAI,EAAC,QADP;EAEEC,IAAI,EAAC,WAFP;EAGEC,SAAS,EAACL,SAHZ;;EAIE;EACAM,WAAW,CAACC,EAAD,EAAIC,IAAJ,EAASC,IAAT,EAAc;IACvB,MAAM;MAACC;IAAD,IAAYC,YAAlB,CADuB,CACQ;IAC/B;;IACAD,OAAO,GAAGD,IAAI,CAAC;MAACL,IAAI,EAAC;IAAN,CAAD,CAAP,GAAwBK,IAAI,EAAnC;EACD;;AATH,CANa,EAiBb;EACEN,IAAI,EAAC,WADP;EAEEC,IAAI,EAAC,cAFP;EAGEC,SAAS,EAAEJ;AAHb,CAjBa,CAAf;AAwBA,MAAMW,MAAM,GAAGf,YAAY,CAAC;EAC1BgB,OAAO,EAAEf,oBAAoB,EADH;EAE1BI;AAF0B,CAAD,CAA3B,C,CAKA;AACA;;AACAU,MAAM,CAACE,UAAP,CAAkB,CAACP,EAAD,EAAIC,IAAJ,EAASC,IAAT,KAAgB;EAChC;EACA,MAAMC,OAAO,GAAGC,YAAY,CAACD,OAA7B,CAFgC,CAIhC;EACA;EACA;EAEA;EACA;;EACA,IAAG,CAACA,OAAD,IAAWH,EAAE,CAACH,IAAH,KAAW,WAAX,IAAwBG,EAAE,CAACH,IAAH,KAAW,UAAjD,EAA6D;IAC3DK,IAAI,CAAC;MAACL,IAAI,EAAC;IAAN,CAAD,CAAJ;EACD,CAFD,MAEK;IACHK,IAAI;EACL;AACF,CAfD;AAiBA,eAAeG,MAAf"},"metadata":{},"sourceType":"module"}