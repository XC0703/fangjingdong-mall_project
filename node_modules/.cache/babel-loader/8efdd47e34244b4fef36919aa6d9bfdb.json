{"ast":null,"code":"import { createElementVNode as _createElementVNode, vModelText as _vModelText, withDirectives as _withDirectives, createCommentVNode as _createCommentVNode, resolveComponent as _resolveComponent, openBlock as _openBlock, createBlock as _createBlock, createElementBlock as _createElementBlock, pushScopeId as _pushScopeId, popScopeId as _popScopeId } from \"vue\";\n\nconst _withScopeId = n => (_pushScopeId(\"data-v-93577984\"), n = n(), _popScopeId(), n);\n\nconst _hoisted_1 = {\n  class: \"wrapper\"\n};\n\nconst _hoisted_2 = /*#__PURE__*/_withScopeId(() => /*#__PURE__*/_createElementVNode(\"img\", {\n  class: \"wrapper__img\",\n  src: \"http://www.dell-lee.com/imgs/vue3/user.png\"\n}, null, -1\n/* HOISTED */\n));\n\nconst _hoisted_3 = {\n  class: \"wrapper__input\"\n};\nconst _hoisted_4 = {\n  class: \"wrapper__input\"\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_ToastView = _resolveComponent(\"ToastView\");\n\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [_hoisted_2, _createElementVNode(\"div\", _hoisted_3, [_withDirectives(_createElementVNode(\"input\", {\n    class: \"wrapper__input__content\",\n    placeholder: \"用户名\",\n    \"onUpdate:modelValue\": _cache[0] || (_cache[0] = $event => $setup.data.username = $event)\n  }, null, 512\n  /* NEED_PATCH */\n  ), [[_vModelText, $setup.data.username]])]), _createElementVNode(\"div\", _hoisted_4, [_withDirectives(_createElementVNode(\"input\", {\n    type: \"password\",\n    class: \"wrapper__input__content\",\n    placeholder: \"请输入密码\",\n    \"onUpdate:modelValue\": _cache[1] || (_cache[1] = $event => $setup.data.password = $event)\n  }, null, 512\n  /* NEED_PATCH */\n  ), [[_vModelText, $setup.data.password]])]), _createElementVNode(\"div\", {\n    class: \"wrapper__login-button\",\n    onClick: _cache[2] || (_cache[2] = (...args) => $setup.handleLogin && $setup.handleLogin(...args))\n  }, \"登陆\"), _createCommentVNode(\" 像这样通过router-link :to跳转，会在外层自动包裹一个a标签 \"), _createCommentVNode(\" <router-link :to=\\\"{name:'RegisterView'}\\\">\\n      <div class=\\\"wrapper__login-link\\\">立即注册</div>\\n    </router-link> \"), _createCommentVNode(\" 因此采取事件绑定的方式进行事件跳转 \"), _createElementVNode(\"div\", {\n    class: \"wrapper__login-link\",\n    onClick: _cache[3] || (_cache[3] = (...args) => $setup.handleRegisterClick && $setup.handleRegisterClick(...args))\n  }, \"立即注册\"), _createCommentVNode(\" 将信息传给ToastView组件 \"), $setup.toastData.showToast ? (_openBlock(), _createBlock(_component_ToastView, {\n    key: 0,\n    message: $setup.toastData.toastMessage\n  }, null, 8\n  /* PROPS */\n  , [\"message\"])) : _createCommentVNode(\"v-if\", true)]);\n}","map":{"version":3,"mappings":";;;;;EACOA,KAAK,EAAC;;;gEACTC,oBAA6E,KAA7E,EAA6E;EAAxED,KAAK,EAAC,cAAkE;EAAnDE,GAAG,EAAC;AAA+C,CAA7E;;AAAA;;;EACKF,KAAK,EAAC;;;EAONA,KAAK,EAAC;;;;;uBATbG,oBA0BM,KA1BN,cA0BM,CAzBJC,UAyBI,EAxBJH,oBAMM,KANN,cAMM,iBALJA,oBAIE,OAJF,EAIE;IAHAD,KAAK,EAAC,yBAGN;IAFAK,WAAW,EAAC,KAEZ;+DADSC,YAAKC,WAAQC;EACtB,CAJF;;EAAA,kBAGWF,YAAKC,WAEZ,CANN,CAwBI,EAjBJN,oBAOM,KAPN,cAOM,iBANJA,oBAKE,OALF,EAKE;IAJAQ,IAAI,EAAC,UAIL;IAHAT,KAAK,EAAC,yBAGN;IAFAK,WAAW,EAAC,OAEZ;+DADSC,YAAKI,WAAQF;EACtB,CALF;;EAAA,kBAIWF,YAAKI,WAEZ,CAPN,CAiBI,EATJT,oBAAgE,KAAhE,EAAgE;IAA3DD,KAAK,EAAC,uBAAqD;IAA5BW,OAAK,yCAAEL,iDAAF;EAAuB,CAAhE,EAAwD,IAAxD,CASI,EARJM,6DAQI,EAPJA,6IAOI,EAJJA,0CAII,EAHJX,oBAAwE,KAAxE,EAAwE;IAAnED,KAAK,EAAC,qBAA6D;IAAtCW,OAAK,yCAAEL,iEAAF;EAAiC,CAAxE,EAA8D,MAA9D,CAGI,EAFJM,yCAEI,EADYN,iBAAUO,2BAA1BC,aAAwEC,oBAAxE,EAAwE;UAAA;IAAnCC,OAAO,EAAEV,iBAAUW;EAAgB,CAAxE;;EAAA,mDACI,CA1BN","names":["class","_createElementVNode","src","_createElementBlock","_hoisted_2","placeholder","$setup","username","$event","type","password","onClick","_createCommentVNode","showToast","_createBlock","_component_ToastView","message","toastMessage"],"sourceRoot":"","sources":["D:\\StudySoft\\VSCode\\VSCodeFile\\CODE_前端projects\\fangjingdong-mall_project\\src\\views\\login\\LoginView.vue"],"sourcesContent":["<template>\n  <div class=\"wrapper\">\n    <img class=\"wrapper__img\" src='http://www.dell-lee.com/imgs/vue3/user.png' />\n    <div class=\"wrapper__input\">\n      <input\n        class=\"wrapper__input__content\"\n        placeholder=\"用户名\"\n        v-model=\"data.username\"\n      />\n    </div>\n    <div class=\"wrapper__input\">\n      <input\n        type=\"password\"\n        class=\"wrapper__input__content\"\n        placeholder=\"请输入密码\"\n        v-model=\"data.password\"\n      />\n    </div>\n    <div class=\"wrapper__login-button\" @click=\"handleLogin\">登陆</div>\n    <!-- 像这样通过router-link :to跳转，会在外层自动包裹一个a标签 -->\n    <!-- <router-link :to=\"{name:'RegisterView'}\">\n      <div class=\"wrapper__login-link\">立即注册</div>\n    </router-link> -->\n    <!-- 因此采取事件绑定的方式进行事件跳转 -->\n    <div class=\"wrapper__login-link\" @click=\"handleRegisterClick\">立即注册</div>\n    <!-- 将信息传给ToastView组件 -->\n    <ToastView v-if=toastData.showToast :message=\"toastData.toastMessage\" />\n  </div>\n</template>\n\n<script>\nimport {reactive} from 'vue';\nimport { useRouter } from 'vue-router';\nimport {post} from '../../utils/request';\nimport ToastView from '../../components/ToastView';\n\nconst useToastEffect = ()=>{\n  const toastData = reactive({\n    showToast:false,\n    toastMessage:''\n  })\n  const showToast = (message)=>{\n      toastData.showToast=true;\n      toastData.toastMessage=message;\n      setTimeout(()=>{\n          toastData.showToast=false,\n          toastData.toastMessage=''\n      },2000)\n    }\n  return {toastData,showToast}\n}\n\nexport default {\n  name: 'LoginView',\n  components:{ToastView},\n  setup(){\n    // 获取路由实例\n    const router = useRouter();\n\n//reactive 是 Vue3 中提供的实现响应式数据的方法。\n    const data = reactive({\n      username:'',\n      password:'',\n    })\n    const {toastData,showToast} = useToastEffect()\n    // 1--我们现在是用axios自带的post方法发起请求，要求后面的URL是完整的URL，不是后端所要求的的/api/user/login，因此可以手动封装一个post方法，此处为优化1\n    // 2--我们现在是用then/catch方法进行Promise的处理，如果不断地then下去，会造成回调地狱，因此可以采用Vue3支持的async/await，是then/catch的完美版，作用与then/catch相同，只是用法上的区别。\n    // const handleLogin = ()=>{\n    //   // 设置登录状态\n    //   axios.post('https://www.fastmock.site/mock/ae8e9031947a302fed5f92425995aa19/jd/api/user/login',{\n    //     username:data.username,\n    //     password:data.password\n    //   }).then(()=>{\n    //     localStorage.isLogin = true;\n    //     // 在登录之后，通过路由实例跳转\n    //     router.push({name:'Home'})\n    //     alert('成功')\n    //   }).catch(()=>{\n    //     alert('失败')\n    //   })\n    // }\n    const handleLogin = async()=>{\n      // 可以使用try/catch监听Promise 返回状态，try为成功，catch失败\n      try{\n        // 设置登录状态\n        // 每遇到一个await都会先返回,再往下执行,变成了同步操作\n        const result = await post('/api/user/login',{\n          username:data.username,\n          password:data.password\n        })\n        // result?.data?.errno的意思是尝试获取result中的data中的error属性，它和result.data.errno的意思是一样的，但是比result.data.errno的容错性更高。\n        // 代码会尝试查找errno，如果查找不到，会返回undefined，而不会报错\n        if(result?.errno===0){\n          localStorage.isLogin = true;\n          // 在登录之后，通过路由实例跳转\n          router.push({name:'Home'})\n          showToast('登录成功')\n        }else{\n          showToast('登录失败')\n        }\n      }catch(e){\n        showToast('请求失败')\n      }\n    }\n\n    const handleRegisterClick = () =>{\n      // 在登录之后，通过路由实例跳转\n      router.push({name:'RegisterView'})\n    }\n    return { handleLogin,handleRegisterClick,data,toastData}\n  }\n}\n</script>\n\n<style lang=\"scss\" scoped>\n@import '../../style/viriables.scss';\n.wrapper {\n  position: absolute;\n  top: 50%;\n  left: 0;\n  right: 0;\n  transform: translateY(-50%);\n  &__img {\n    display: block;\n    margin: 0 auto .4rem auto;\n    width: .66rem;\n    height: .66rem;\n  }\n  &__input {\n    height: .48rem;\n    margin: 0 .4rem .16rem .4rem;\n    padding: 0 .16rem;\n    background: #F9F9F9;\n    border: 1px solid rgba(0,0,0,0.10);\n    border-radius: 6px;\n    border-radius: 6px;\n    &__content {\n      line-height: .48rem;\n      border: none;\n      outline: none;\n      width: 100%;\n      background: none;\n      font-size: .16rem;\n      color: $content-notice-fontcolor;\n      &::placeholder {\n        color: $content-notice-fontcolor;\n      }\n    }\n  }\n  &__login-button {\n    margin: .32rem .4rem .16rem .4rem;\n    line-height: .48rem;\n    background: #0091FF;\n    box-shadow: 0 .04rem .08rem 0 rgba(0,145,255,0.32);\n    border-radius: .04rem;\n    border-radius: .04rem;\n    color: #fff;\n    font-size: .16rem;\n    text-align: center;\n  }\n  &__login-link {\n    text-align: center;\n    font-size: .14rem;\n    color: $content-notice-fontcolor;\n  }\n}\n</style>"]},"metadata":{},"sourceType":"module"}